// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  password     String
  name         String?
  username     String?
  imageUrl     String?
  role         String?       @default("Member")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  projects     Project[]
  certificates Certificate[]
  skills       Skill[]
  careers      Career[]
}

model Project {
  id           String   @id @default(cuid())
  title        String
  description  String
  technologies String
  link         String?
  imageUrl     String?
  githubUrl    String?
  featured     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Certificate {
  id        String   @id @default(cuid())
  name      String
  issuer    String
  date      DateTime
  link      String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Skill {
  id        String   @id @default(cuid())
  name      String
  category  String
  level     String
  years     Float
  iconName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Career {
  id          String   @id @default(cuid())
  position    String
  company     String
  startDate   DateTime
  endDate     String?
  description String
  logoUrl     String?
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String
  status    String   @default("unread") // unread, read, replied, archived
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PageView {
  id        String   @id @default(cuid())
  path      String
  ipAddress String?
  userAgent String?
  referrer  String?
  createdAt DateTime @default(now())
}

model Analytics {
  id        String   @id @default(cuid())
  type      String   // daily, weekly, monthly
  date      DateTime
  views     Int      @default(0)
  visitors  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}