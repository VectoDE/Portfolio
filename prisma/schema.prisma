// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String                @id @default(cuid())
  email         String                @unique
  password      String
  name          String?
  username      String?
  imageUrl      String?               @db.Text
  role          String?               @default("Member")
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  projects      Project[]
  certificates  Certificate[]
  skills        Skill[]
  careers       Career[]
  announcements AnnouncementSettings?
  media         Media[]
  comments      ProjectComment[]
  reactions     ProjectReaction[]
}

model Project {
  id                 String           @id @default(cuid())
  title              String
  description        String           @db.Text
  technologies       String           @db.Text
  link               String?          @db.Text
  imageUrl           String?          @db.Text
  logoUrl            String?          @db.Text
  githubUrl          String?          @db.Text
  featured           Boolean          @default(false)
  developmentProcess String?          @db.Text @default("This project was developed using an agile methodology, with regular iterations and feedback cycles.")
  challengesFaced    String?          @db.Text
  futurePlans        String?          @db.Text
  logContent         String?          @db.Text
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  userId             String
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  features           ProjectFeature[]
  newsletters        Newsletter[]
  comments           ProjectComment[]
  reactions          ProjectReaction[]
}

model ProjectFeature {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Certificate {
  id        String   @id @default(cuid())
  name      String
  issuer    String
  date      DateTime
  link      String?  @db.Text
  imageUrl  String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Skill {
  id        String   @id @default(cuid())
  name      String
  category  String
  level     String
  years     Float
  iconName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Career {
  id          String   @id @default(cuid())
  position    String
  company     String
  startDate   DateTime
  endDate     String?
  description String   @db.Text
  logoUrl     String?  @db.Text
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String   @db.Text
  status    String   @default("unread") // unread, read, replied, archived
  notes     String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PageView {
  id        String   @id @default(cuid())
  path      String   @db.VarChar(512)
  ipAddress String?  @db.VarChar(64)
  userAgent String?  @db.Text
  referrer  String?  @db.Text
  createdAt DateTime @default(now())
}

model Analytics {
  id        String   @id @default(cuid())
  type      String // daily, weekly, monthly
  date      DateTime
  views     Int      @default(0)
  visitors  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailSettings {
  id            String   @id @default(cuid())
  adminEmail    String?
  emailFrom     String?
  smtpServer    String?
  smtpPort      String?
  smtpUser      String?
  smtpPassword  String?
  sendAutoReply Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// New models for newsletter functionality
model Subscriber {
  id          String                @id @default(cuid())
  email       String                @unique
  name        String?
  token       String                @unique // For subscription management (unsubscribe, preferences)
  isConfirmed Boolean               @default(false)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  preferences SubscriberPreference?
}

model SubscriberPreference {
  id           String     @id @default(cuid())
  subscriberId String     @unique
  subscriber   Subscriber @relation(fields: [subscriberId], references: [id], onDelete: Cascade)
  projects     Boolean    @default(true)
  certificates Boolean    @default(true)
  skills       Boolean    @default(true)
  careers      Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Newsletter {
  id           String    @id @default(cuid())
  subject      String
  content      String    @db.Text
  sentAt       DateTime?
  scheduledFor DateTime?
  status       String    @default("draft") // draft, scheduled, sent, cancelled
  type         String // project, certificate, skill, career, manual
  projectId    String?
  project      Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model AnnouncementSettings {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  newProjects     Boolean  @default(true)
  newCertificates Boolean  @default(true)
  newSkills       Boolean  @default(true)
  newCareers      Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Media {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  originalName String
  fileName     String
  mimeType     String?
  size         Int
  url          String   @db.Text
  createdAt    DateTime @default(now())
}

enum ReactionType {
  LIKE
  INSIGHTFUL
  CELEBRATE
}

model ProjectComment {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectReaction {
  id        String       @id @default(cuid())
  projectId String
  project   Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      ReactionType
  createdAt DateTime     @default(now())

  @@unique([projectId, userId])
}
